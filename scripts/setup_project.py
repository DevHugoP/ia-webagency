# scripts/setup_project.py
import os
import subprocess
import sqlite3
import json
import sys

# V√©rifier si Ollama est install√©
def check_ollama():
    try:
        result = subprocess.run(["ollama", "version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Ollama d√©tect√©: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Erreur lors de la v√©rification d'Ollama")
            return False
    except FileNotFoundError:
        print("‚ùå Ollama n'est pas install√©. Veuillez l'installer depuis https://ollama.ai")
        return False

# Initialisation de la base de donn√©es
def init_database():
    try:
        os.makedirs('data/db', exist_ok=True)
        db_path = 'data/db/agency.db'
        
        with sqlite3.connect(db_path) as db:
            # Table des projets
            db.execute('''
            CREATE TABLE IF NOT EXISTS projects (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL UNIQUE,
                description TEXT,
                status TEXT DEFAULT 'created',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''')
            
            # Table de la base de connaissances
            db.execute('''
            CREATE TABLE IF NOT EXISTS knowledge (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                agent TEXT NOT NULL,
                category TEXT NOT NULL,
                query TEXT,
                content TEXT NOT NULL,
                project_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES projects (id)
            )
            ''')
            
            # Table des interactions agent-projet
            db.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id INTEGER NOT NULL,
                agent TEXT NOT NULL,
                step_id TEXT NOT NULL,
                content TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES projects (id)
            )
            ''')
            
            # Table des feedback
            db.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id INTEGER NOT NULL,
                step_id TEXT NOT NULL,
                feedback TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES projects (id)
            )
            ''')
            
            db.commit()
        
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
        return False

# Cr√©ation des agents dans Ollama
def setup_agents():
    agents = [
        'vision', 'pixel', 'arch', 'script', 'node', 
        'data', 'secure', 'test', 'deploy', 'pm'
    ]
    
    success = True
    for agent in agents:
        modelfile_path = f"backend/agents/modelfiles/{agent}.modelfile"
        
        if not os.path.exists(modelfile_path):
            print(f"‚ùå Modelfile manquant pour {agent}")
            success = False
            continue
        
        try:
            print(f"üîÑ Cr√©ation de l'agent {agent}...")
            # V√©rifier si l'agent existe d√©j√†
            result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
            
            if agent in result.stdout:
                print(f"  ‚û°Ô∏è L'agent {agent} existe d√©j√†, mise √† jour...")
                subprocess.run(["ollama", "rm", agent], check=True)
            
            # Cr√©er l'agent avec le Modelfile
            result = subprocess.run(
                ["ollama", "create", agent, "-f", modelfile_path],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print(f"‚úÖ Agent {agent} cr√©√© avec succ√®s")
            else:
                print(f"‚ùå Erreur lors de la cr√©ation de l'agent {agent}: {result.stderr}")
                success = False
        
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de la cr√©ation de l'agent {agent}: {e}")
            success = False
    
    return success

# Cr√©ation des dossiers de projet
def create_folders():
    folders = [
        'data/projects',
        'data/knowledge',
        'data/db'
    ]
    
    for folder in folders:
        os.makedirs(folder, exist_ok=True)
    
    print("‚úÖ Structure de dossiers cr√©√©e")
    return True

# Pr√©-remplissage de la base de connaissances
def seed_knowledge():
    try:
        basic_knowledge = [
            {
                "agent": "vision",
                "category": "M√©thodologie",
                "content": "Le Design Thinking se d√©roule en 5 phases: Empathie, D√©finition, Id√©ation, Prototypage, Test. Cette approche centr√©e utilisateur permet de r√©soudre des probl√®mes complexes en se concentrant sur les besoins r√©els des utilisateurs."
            },
            {
                "agent": "pixel",
                "category": "Principes UI",
                "content": "Les 10 heuristiques de Nielsen sont des principes fondamentaux pour la conception d'interfaces: visibilit√© de l'√©tat du syst√®me, correspondance avec le monde r√©el, contr√¥le et libert√© utilisateur, coh√©rence et standards, pr√©vention des erreurs, reconnaissance plut√¥t que rappel, flexibilit√© et efficacit√©, esth√©tique et design minimaliste, aide √† la reconnaissance et r√©cup√©ration d'erreurs, aide et documentation."
            },
            {
                "agent": "arch",
                "category": "Patterns",
                "content": "Le pattern MVC (Model-View-Controller) s√©pare une application en trois composants interconnect√©s: le mod√®le (donn√©es), la vue (interface utilisateur) et le contr√¥leur (logique de l'application). Cette s√©paration permet une meilleure organisation du code et facilite la maintenance et l'√©volution."
            },
            {
                "agent": "script",
                "category": "Frameworks",
                "content": "React est une biblioth√®que JavaScript pour construire des interfaces utilisateur. Ses principes cl√©s sont: le Virtual DOM pour des mises √† jour efficaces, les composants r√©utilisables, le flux de donn√©es unidirectionnel et l'√©tat (state) pour g√©rer les donn√©es dynamiques."
            },
            {
                "agent": "node",
                "category": "API REST",
                "content": "Les principes RESTful incluent: interface uniforme, sans √©tat, mise en cache, architecture client-serveur, syst√®me en couches et code √† la demande. Les endpoints API doivent suivre des conventions de nommage coh√©rentes et utiliser les verbes HTTP appropri√©s (GET, POST, PUT, DELETE)."
            },
            {
                "agent": "data",
                "category": "Optimisation",
                "content": "L'indexation de base de donn√©es am√©liore les performances des requ√™tes en permettant au moteur de base de donn√©es de trouver rapidement les donn√©es sans scanner toutes les lignes. Un index doit √™tre cr√©√© sur les colonnes fr√©quemment utilis√©es dans les clauses WHERE, JOIN et ORDER BY."
            },
            {
                "agent": "secure",
                "category": "OWASP",
                "content": "Le Top 10 OWASP inclut: injection, authentification bris√©e, exposition de donn√©es sensibles, entit√©s XML externes, contr√¥le d'acc√®s d√©faillant, mauvaise configuration de s√©curit√©, cross-site scripting (XSS), d√©s√©rialisation non s√©curis√©e, utilisation de composants vuln√©rables, et journalisation/surveillance insuffisante."
            },
            {
                "agent": "test",
                "category": "M√©thodes",
                "content": "La pyramide de tests recommande une r√©partition optimale entre diff√©rents types de tests: nombreux tests unitaires √† la base, tests d'int√©gration au milieu, et tests end-to-end au sommet. Cette approche offre un bon √©quilibre entre vitesse d'ex√©cution, couverture et fiabilit√©."
            },
            {
                "agent": "deploy",
                "category": "CI/CD",
                "content": "L'int√©gration continue (CI) consiste √† automatiser l'int√©gration des changements de code de plusieurs contributeurs dans un r√©f√©rentiel partag√©. Le d√©ploiement continu (CD) automatise la livraison d'applications dans les environnements de production."
            },
            {
                "agent": "pm",
                "category": "Agile",
                "content": "La m√©thodologie Scrum organise le travail en sprints (it√©rations de 2-4 semaines) avec des r√¥les cl√©s (Product Owner, Scrum Master, √©quipe de d√©veloppement) et des √©v√©nements r√©guliers (planification de sprint, m√™l√©es quotidiennes, revue de sprint, r√©trospective)."
            }
        ]
        
        conn = sqlite3.connect('data/db/agency.db')
        cursor = conn.cursor()
        
        for item in basic_knowledge:
            cursor.execute(
                "INSERT INTO knowledge (agent, category, content) VALUES (?, ?, ?)",
                (item["agent"], item["category"], item["content"])
            )
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Base de connaissances initialis√©e avec des donn√©es de base")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de connaissances: {e}")
        return False

# Script principal
def main():
    print("\n=== Configuration de l'Agence Web IA ===\n")
    
    # V√©rifier Ollama
    if not check_ollama():
        print("\n‚ùå Configuration √©chou√©e: Ollama est requis")
        sys.exit(1)
    
    # Cr√©er les dossiers
    create_folders()
    
    # Initialiser la base de donn√©es
    if not init_database():
        print("\n‚ùå Configuration √©chou√©e: Erreur d'initialisation de la base de donn√©es")
        sys.exit(1)
    
    # Pr√©-remplir la base de connaissances
    seed_knowledge()
    
    # Configurer les agents
    if not setup_agents():
        print("\n‚ö†Ô∏è Certains agents n'ont pas pu √™tre configur√©s. V√©rifiez les erreurs ci-dessus.")
    
    print("\n‚úÖ Configuration termin√©e! L'agence IA est pr√™te √† l'emploi.")
    print("\nPour d√©marrer l'application:")
    print("1. Lancez le backend: cd backend && python app.py")
    print("2. Lancez le frontend: cd frontend && npm start")

if __name__ == "__main__":
    main()